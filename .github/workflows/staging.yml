name: Create Staging Environment

on:
  workflow_dispatch:
    inputs:
      PR_number:
        description: 'Pull request number'
        required: true

jobs:
  create:
    name: 'Create staging and deploy'
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      name: 'Checkout repository'
    
    - name: Verify Pull Request Number
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const response = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: ${{ github.event.inputs.PR_number }}
          })
          
          // Check if the pull request is open
          if (response.data.number !== ${{ github.event.inputs.PR_number }}) {
            throw new Error('Pull request is not open or number is not valid!')
          }

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}
    
    - name: 'Create staging environment resource file'
      id: create_resource_file
      working-directory: infra/instances/staging/
      run: |
        OUTPUT="$(./create_staging_resource.sh PR_${{ github.event.inputs.PR_number }} | jq -r .terraform_expected_output)"
        echo "::set-output name=STAGING_RESOURCE_NAME::$OUTPUT"
        ls -lha
        
    - name: Terraform Init and Validate
      id: init
      working-directory: infra/instances/staging/
      run: |
        terraform init
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: infra/instances/staging/
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v5
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      working-directory: infra/instances/staging/
      run: terraform apply -auto-approve
      
    - name: Terraform Output
      id: apply_output
      working-directory: infra/instances/staging/
      run: terraform output -raw -no-color ${{ steps.create_resource_file.outputs.STAGING_RESOURCE_NAME }}
    
    - name: Commit terraform resource files to the PR
      working-directory: infra/instances/staging/
      run: |
        git config --global user.name '${{ github.actor }}'
        git config --global user.email '${{ github.actor}}@users.noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git fetch origin main
        git checkout main
        git add ./\*.tf
        git commit -m "Add terraform resource files" && \
          git push || echo "Nothing to commit"

    - uses: burnett01/rsync-deployments@23a557dceb19f9bb960ef40cf75cab5e9b37ec1f
      name: 'Deploy to staging'
      with:
        switches: -avzr --delete
        path: ./web
        remote_path: /var/app
        remote_host: ${{ steps.apply_output.outputs.stdout }}
        remote_user: ${{ secrets.REMOTE_USER }}
        remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - uses: JimCronqvist/action-ssh@7737f1192ddd8376686e9d6354dea44592c942bf
      name: Execute SSH commmands on remote server
      with:
        hosts: '${{ secrets.REMOTE_USER }}@${{ steps.apply_output.outputs.stdout }}'
        privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
        command: |
          cd /var/app/web
          npm ci
          pm2 start /var/app/web/bin/www || pm2 restart /var/app/web/bin/www
          sudo service nginx restart

    - name: Update status
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Staging server created
          > PR #${{ github.event.inputs.PR_number }} has been deployed successfully
          
          URL: http://${{ steps.apply_output.outputs.stdout }}`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
