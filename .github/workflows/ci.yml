name: Continuous Integration Workflow

# This workflow is triggered whenever a new PR is created on the main branch
on:
  pull_request:
    branches:
      - main

jobs:

  # Run unit tests to make sure everything is üëç
  test:
    name: 'Run unit tests'
    defaults:
      run:
        shell: bash
        # Define the working directory for all run steps in the workflow
        working-directory: ./web
    # Specify the OS we want the workflow to run on
    runs-on: ubuntu-latest
    # Define the steps for this job
    steps:
    - uses: actions/checkout@v2
      name: 'Checkout repository'

    - name: 'Install Dependencies'
      run: npm install
    
    - name: 'Run Tests'
      run: npm run test

  # Run the linter to check for code style issues
  lint:
    name: 'Run linter'
    defaults:
      run:
        shell: bash
        # Define the working directory for all run steps in the workflow
        working-directory: ./web
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
      name: 'Checkout repository'
    
    - name: 'Install Dependencies'
      run: npm install

    - name: 'Run Linter'
      run: npx standard -v
  
  # Deploy the current branch to a newly minted staging environment
  deploy:
    name: 'Create staging and deploy'
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    # Requires the test and lint jobs to be completed successfully before
    # deploying
    needs: ['test', 'lint']
    steps:

    - uses: actions/checkout@v2
      name: 'Checkout repository'
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        # terraform_version: 0.13.0
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}
    
    - name: 'Create staging environment resource file'
      id: create_resource_file
      working-directory: ./infra/instances/staging/
      run: |
        OUTPUT="$(./create_staging_resource.sh | jq -r .terraform_expected_output)"
        echo "::set-output name=STAGING_RESOURCE_NAME::$OUTPUT"
        ls -lha
        
    - name: Terraform Init and Validate
      id: init
      working-directory: ./infra/instances/staging/
      run: |
        terraform init
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: ./infra/instances/staging/
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      working-directory: ./infra/instances/staging/
      run: terraform apply -auto-approve
      
    - name: Get staging server public DNS
      id: fetch_dns
      working-directory: ./infra/instances/staging/
      run: |
        OUTPUT="$(terraform output -json | jq -r .${{ steps.create_resource_file.outputs.STAGING_RESOURCE_NAME }}.value)"
        echo "::set-output name=STAGING_SERVER_HOSTNAME::$OUTPUT"
    
    - name: Commit terraform resource files to the PR
      uses: EndBug/add-and-commit@d77762158d703e60c60cf5baa4de52697d1414a3
      with:
        author_name: GitHub Actions
        author_email: actions@github.com
        message: 'Add new staging resource'
        add: '*.tf'

    - uses: burnett01/rsync-deployments@23a557dceb19f9bb960ef40cf75cab5e9b37ec1f
      name: 'Deploy to staging'
      with:
        switches: -avzr --delete
        path: ./web
        remote_path: /var/app
        remote_host: ${{ steps.fetch_dns.outputs.STAGING_SERVER_HOSTNAME }}
        remote_user: ${{ secrets.REMOTE_USER }}
        remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - uses: JimCronqvist/action-ssh@7737f1192ddd8376686e9d6354dea44592c942bf
      name: Execute SSH commmands on remote server
      with:
        hosts: '${{ secrets.REMOTE_USER }}@${{ steps.fetch_dns.outputs.STAGING_SERVER_HOSTNAME }}'
        privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
        command: |
          cd /var/app/web
          npm ci
          pm2 start /var/app/web/bin/www || pm2 restart /var/app/web/bin/www
          sudo service nginx restart
